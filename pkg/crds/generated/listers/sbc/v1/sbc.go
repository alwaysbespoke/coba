/*
Copyright 2023 Eric Hicks

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/alwaysbespoke/coba/pkg/crds/sbc/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SBCLister helps list SBCs.
// All objects returned here must be treated as read-only.
type SBCLister interface {
	// List lists all SBCs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SBC, err error)
	// SBCs returns an object that can list and get SBCs.
	SBCs(namespace string) SBCNamespaceLister
	SBCListerExpansion
}

// sBCLister implements the SBCLister interface.
type sBCLister struct {
	indexer cache.Indexer
}

// NewSBCLister returns a new SBCLister.
func NewSBCLister(indexer cache.Indexer) SBCLister {
	return &sBCLister{indexer: indexer}
}

// List lists all SBCs in the indexer.
func (s *sBCLister) List(selector labels.Selector) (ret []*v1.SBC, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SBC))
	})
	return ret, err
}

// SBCs returns an object that can list and get SBCs.
func (s *sBCLister) SBCs(namespace string) SBCNamespaceLister {
	return sBCNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SBCNamespaceLister helps list and get SBCs.
// All objects returned here must be treated as read-only.
type SBCNamespaceLister interface {
	// List lists all SBCs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SBC, err error)
	// Get retrieves the SBC from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SBC, error)
	SBCNamespaceListerExpansion
}

// sBCNamespaceLister implements the SBCNamespaceLister
// interface.
type sBCNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SBCs in the indexer for a given namespace.
func (s sBCNamespaceLister) List(selector labels.Selector) (ret []*v1.SBC, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SBC))
	})
	return ret, err
}

// Get retrieves the SBC from the indexer for a given namespace and name.
func (s sBCNamespaceLister) Get(name string) (*v1.SBC, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sbc"), name)
	}
	return obj.(*v1.SBC), nil
}
